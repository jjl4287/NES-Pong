<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>NES Pong - by Jakob Langtry</title>
  <style>
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
      background-color: #f5f5f5;
      margin: 0;
      padding: 20px;
      display: flex;
      flex-direction: column;
      align-items: center;
      min-height: 100vh;
    }
    h1 {
      margin-top: 0;
      color: #333;
    }
    .container {
      max-width: 900px;
      margin: 0 auto;
      background-color: white;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    .emulator {
      margin: 20px 0;
      display: flex;
      flex-direction: column;
      align-items: center;
    }
    canvas {
      border: 1px solid #ddd;
      image-rendering: pixelated;
      image-rendering: crisp-edges;
      width: 768px; /* 3x original size */
      height: 720px; /* 3x original size */
      background-color: #000;
      display: block;
      margin: 0 auto;
    }
    .controls {
      margin-top: 20px;
      text-align: center;
    }
    .controls button {
      padding: 8px 16px;
      margin: 0 5px;
      font-size: 16px;
      background-color: #007bff;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
    }
    .controls button:hover {
      background-color: #0056b3;
    }
    .footer {
      margin-top: 20px;
      text-align: center;
      font-size: 14px;
      color: #666;
    }
    .instructions {
      max-width: 768px;
      margin: 20px auto;
      padding: 15px;
      background-color: #f8f9fa;
      border-radius: 4px;
      border-left: 4px solid #007bff;
      font-size: 16px;
    }
    #debug {
      margin-top: 10px;
      padding: 10px;
      background-color: #f8f9fa;
      border-radius: 4px;
      font-family: monospace;
      white-space: pre;
      max-height: 200px;
      overflow-y: auto;
      font-size: 12px;
      width: 768px;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>NES Pong by Jakob Langtry</h1>
    
    <div class="instructions">
      <h3>Player 1 Controls:</h3>
      <p>Up: W<br>Down: S</p>
      
      <h3>Player 2 Controls:</h3>
      <p>Up: Up Arrow<br>Down: Down Arrow</p>
      
      <p>Press Start (Enter) to begin the game</p>
    </div>

    <div class="emulator">
      <canvas id="nes-canvas" width="256" height="240"></canvas>
      <div class="controls">
        <button id="start">Start</button>
        <button id="reset">Reset</button>
      </div>
      <div id="debug"></div>
    </div>
    
    <div class="footer">
      <p>Created by Jakob Langtry. Powered by <a href="https://github.com/bfirsh/jsnes" target="_blank">jsNES</a>.</p>
    </div>
  </div>

  <script src="js/jsnes.min.js"></script>
  <script>
    // Debug logging function
    function log(message) {
      const debug = document.getElementById('debug');
      debug.textContent += message + '\n';
      console.log(message);
      
      // Keep scrolled to bottom
      debug.scrollTop = debug.scrollHeight;
    }
    
    document.addEventListener('DOMContentLoaded', function() {
      log('DOM loaded, initializing emulator...');
      
      const SCREEN_WIDTH = 256;
      const SCREEN_HEIGHT = 240;
      const FRAMEBUFFER_SIZE = SCREEN_WIDTH * SCREEN_HEIGHT;
      
      let canvas_ctx, image;
      let framebuffer_u8, framebuffer_u32;
      
      let nes = new jsnes.NES({
        onFrame: function(framebuffer_24) {
          for(let i = 0; i < FRAMEBUFFER_SIZE; i++) {
            let r = framebuffer_24[i * 3 + 0];
            let g = framebuffer_24[i * 3 + 1];
            let b = framebuffer_24[i * 3 + 2];
            framebuffer_u32[i] = (255 << 24) | (b << 16) | (g << 8) | r;
          }
        },
        onAudioSample: function() {
          // Audio not implemented
        }
      });
      
      function onAnimationFrame() {
        window.requestAnimationFrame(onAnimationFrame);
        
        // Run the emulation
        nes.frame();
        
        // Render the frame
        image.data.set(framebuffer_u8);
        canvas_ctx.putImageData(image, 0, 0);
      }
      
      function initCanvas() {
        log('Initializing canvas...');
        let canvas = document.getElementById('nes-canvas');
        
        // Set canvas properties - ensure it's exactly 256x240 internally
        canvas.width = SCREEN_WIDTH;
        canvas.height = SCREEN_HEIGHT;
        
        // Get the 2D context without alpha for better performance
        canvas_ctx = canvas.getContext('2d', { alpha: false });
        
        // Create image data
        image = canvas_ctx.createImageData(SCREEN_WIDTH, SCREEN_HEIGHT);
        
        framebuffer_u8 = new Uint8ClampedArray(image.data.buffer);
        framebuffer_u32 = new Uint32Array(image.data.buffer);
        
        // Fill with black
        for(let i = 0; i < FRAMEBUFFER_SIZE; i++) {
          framebuffer_u32[i] = 0xFF000000;
        }
        
        canvas_ctx.putImageData(image, 0, 0);
      }
      
      function loadROM() {
        log('Fetching ROM file...');
        fetch('roms/pong.nes')
          .then(response => {
            if (!response.ok) {
              throw new Error('Failed to fetch ROM: ' + response.status);
            }
            log('ROM fetch successful, size: ' + response.headers.get('content-length') + ' bytes');
            return response.arrayBuffer();
          })
          .then(buffer => {
            const romData = new Uint8Array(buffer);
            log('ROM loaded: ' + romData.length + ' bytes');
            
            // Log header information
            if (romData.length >= 16) {
              const magic = String.fromCharCode(romData[0], romData[1], romData[2]) + romData[3].toString(16);
              log('iNES Header: ' + magic);
              log('PRG ROM: ' + romData[4] + ' x 16KB');
              log('CHR ROM: ' + romData[5] + ' x 8KB');
              log('Mapper: ' + ((romData[6] >> 4) | (romData[7] & 0xF0)));
            }
            
            // Convert to string (most reliable method for jsNES)
            let romString = "";
            for (let i = 0; i < romData.length; i++) {
              romString += String.fromCharCode(romData[i]);
            }
            
            try {
              log('Loading ROM into emulator...');
              nes.loadROM(romString);
              log('ROM loaded successfully!');
              
              // Start the emulation loop
              window.requestAnimationFrame(onAnimationFrame);
            } catch (e) {
              log('ERROR: Failed to load ROM: ' + e.message);
              console.error(e);
            }
          })
          .catch(error => {
            log('ERROR: ' + error.message);
            console.error(error);
          });
      }
      
      // Keyboard controls
      const KEYS = {
        87: { player: 1, button: jsnes.Controller.BUTTON_UP },    // W - up
        83: { player: 1, button: jsnes.Controller.BUTTON_DOWN },  // S - down
        38: { player: 2, button: jsnes.Controller.BUTTON_UP },    // Arrow Up
        40: { player: 2, button: jsnes.Controller.BUTTON_DOWN },  // Arrow Down
        13: { player: 1, button: jsnes.Controller.BUTTON_START }, // Enter - start
        82: { player: 1, button: jsnes.Controller.BUTTON_RESET }, // R - reset
      };
      
      document.addEventListener('keydown', function(e) {
        let key = KEYS[e.keyCode];
        if(key) {
          nes.buttonDown(key.player, key.button);
          e.preventDefault();
        }
      });
      
      document.addEventListener('keyup', function(e) {
        let key = KEYS[e.keyCode];
        if(key) {
          nes.buttonUp(key.player, key.button);
          e.preventDefault();
        }
      });
      
      // Button controls
      document.getElementById('start').addEventListener('click', function() {
        log('Start button pressed');
        nes.buttonDown(1, jsnes.Controller.BUTTON_START);
        setTimeout(function() {
          nes.buttonUp(1, jsnes.Controller.BUTTON_START);
        }, 200);
      });
      
      document.getElementById('reset').addEventListener('click', function() {
        log('Reset button pressed');
        nes.buttonDown(1, jsnes.Controller.BUTTON_RESET);
        setTimeout(function() {
          nes.buttonUp(1, jsnes.Controller.BUTTON_RESET);
        }, 200);
      });
      
      // Initialize
      initCanvas();
      loadROM();
    });
  </script>
</body>
</html>
